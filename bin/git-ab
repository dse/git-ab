#!/usr/bin/env bash
set -o errexit
set -o pipefail
set -o nounset
shopt -s lastpipe

main () {
    declare verbose=0 print_ahead=0 print_behind=0 quiet=0
    while getopts 'vabq-:' OPTION ; do
        if [[ "${OPTION}" == "-" ]] ; then
            if [[ "${OPTARG}" == *=* ]] ; then
                OPTION="${OPTARG%%=*}"
                OPTARG="${OPTARG#*=}"
            else
                OPTION="${OPTARG}"
                unset OPTARG
            fi
        fi
        case "${OPTION}" in
            v|verbose|verbosity) 
                [[ -v OPTARG ]] && { echo "$0: option does not take argument -- ${OPTION}"; exit 1; }
                verbosity=$((verbosity + 1))
                ;;
            a|ahead)  print_ahead=1;;
            b|behind) print_behind=1;;
            q|quiet)  quiet=1;;
            *) echo "$0: illegal option -- ${OPTION}" >&2; exit 1;;
        esac
    done
    (( !(print_ahead + print_behind) )) && print_ahead=1 print_behind=1

    declare tempfile="$(mktemp)"; tempfiles+=("${tempfile}")

    # get all local and remote branch refs
    declare -a refs
    git --no-pager branch --all --list --no-color --no-column |
        cut -c3- >"${tempfile}"
    grep -v -e '/HEAD -> ' "${tempfile}" | mapfile -t refs

    # collect local and remote branch ref arrays
    declare -a locals=()
    declare -a remotes=()
    declare -A has_local=()
    declare -A has_remote=()
    declare ref local ahead behind remote

    # collect data
    for ref in "${refs[@]}" ; do
        if [[ "${ref}" = remotes/*/* ]] ; then
            local="${ref#remotes/*/}" # can remotes contain a slash?
            has_remote["${local}"]=1
            remotes+=("${ref}")
        else
            has_local["${ref}"]=1
            locals+=("${ref}")
        fi
    done

    # compare each remote and (if any) its local counterpart
    for remote in "${remotes[@]}" ; do
        local="${remote#remotes/*/}"
        if (( !has_local["${local}"] )) ; then
            if (( !quiet )) ; then
                if (( print_ahead && print_behind )) ; then
                    echo "- - - ${remote}" 
                else
                    echo "- - ${remote}"
                fi
            fi
            continue
        fi
        git rev-list --left-right --count "${local}"..."${remote}" |
            read ahead behind
        if (( print_ahead && print_behind )) ; then
            if (( ahead || behind || !quiet )) ; then
                echo "${ahead} ${behind} ${local} ${remote}"
            fi
        elif (( print_ahead )) ; then
            if (( ahead || !quiet )) ; then
                echo "${ahead} ${local} ${remote}"
            fi
        else                    # print_behind is true
            if (( behind || !quiet )) ; then
                echo "${behind} ${local} ${remote}"
            fi
        fi
    done

    # list each local without a remote
    for local in "${locals[@]}" ; do
        if (( !has_remote["${local}"] )) ; then
            if (( !quiet )) ; then
                if (( print_ahead && print_behind )) ; then
                    echo "- - ${local} -"
                else
                    echo "- ${local} -"
                fi
            fi
        fi
    done
}

declare -a tempfiles=()
trap rm_tempfiles EXIT
rm_tempfiles () { /bin/rm -fr "${tempfiles[@]}" >&/dev/null || true ; }

#------------------------------------------------------------------------------
main "$@"
